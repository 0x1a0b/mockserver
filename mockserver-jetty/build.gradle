apply plugin: 'war'

dependencies {
    // http
    providedCompile "javax.servlet:javax.servlet-api:$servletVersion"

    // Jetty HTTP Server
    compile "org.eclipse.jetty:jetty-http:$jettyVersion"
    compile "org.eclipse.jetty:jetty-server:$jettyVersion"
    compile "org.eclipse.jetty:jetty-servlet:$jettyVersion"

    // Jetty HTTP Client
    compile "org.eclipse.jetty:jetty-client:$jettyVersion"
    compile "org.eclipse.jetty:jetty-util:$jettyVersion"
    compile "org.eclipse.jetty:jetty-io:$jettyVersion"

    // Tomcat Server (integration testing)
    testCompile "org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion"
    testCompile "org.apache.tomcat.embed:tomcat-embed-logging-juli:$tomcatVersion"

    // commons & guava
    compile "commons-io:commons-io:$commonsIoVersion"
    compile "com.google.guava:guava:$guavaVersion"

    // logging
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    runtime "ch.qos.logback:logback-classic:$logbackClassicVersion"

    // test
    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-all:$mockitoAllVersion"

    // integration testing
    testCompile "org.springframework:spring-test:$springVersion"
}

task run(type: JavaExec, dependsOn: [classes]) {
    main = 'org.mockserver.jetty.cli.Main'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty("serverPort")) {
        args '-serverPort'
        args serverPort
    }
    if (project.hasProperty("serverSecurePort")) {
        args '-serverSecurePort'
        args serverSecurePort
    }
    if (project.hasProperty("proxyPort")) {
        args '-proxyPort'
        args proxyPort
    }
    if (project.hasProperty("proxySecurePort")) {
        args '-proxySecurePort'
        args proxySecurePort
    }
}