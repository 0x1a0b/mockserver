#%RAML 1.0
---
title: Mock Server API
version: 10.6

/status
  put:
    description: check MockServer is running
  response:
    200: MockServer is running

/bind
  put:
    description: bind addition ports
    body:
      application/json:
        schema: ports
        example: |
          {
            "ports": [
              1081
            ]
          }
    responses:
      202:
        description: now listening on additional requested ports
        body:
          application/json:
            schema: ports
            example: |
              {
                "ports": [
                  1080,
                  1081
                ]
              }
      406: unable to bind to ports (i.e. already bound or JVM process doesn't have permission)
      400: incorrect request format

#/expectation
#{
#    "httpRequest": {
#        "method": "GET",
#        "path": "/simple"
#    },
#    "httpResponse": {
#        "statusCode": 200,
#        "body": "some response"
#    },
#    "times": {
#        "remainingTimes": 1,
#        "unlimited": true
#    }
#}
#
#/clear
#  put:
#    description: clear expectations and recorded requests
#    body:
#      application/json:
#        schema: | request
#        example: |
#          {
#            "path": "/json",
#            "body": {
#              "type": "JSON",
#              "value": "{'one_name':'one_value', 'two_name':'two_value'}"
#            }
#          }
#    responses:
#      201:
#
#/reset
#
#/dumpToLog
#{
#	"path": "/somePath"
#}
#
#/retrieve
#  put:
#    queryParameters:
#      type: Type to retrieve either `expectation` or `request`, defaults to `request`
#  responses:
#      200:
#        body:
#          application/json:
#            example: |
#              {
#                  "path": "/json",
#                  "body": {
#                      "type": "JSON",
#                      "value": "{'one_name':'one_value', 'two_name':'two_value'}"
#                  }
#              }
#
#/verify
#{
#    "httpRequest": {
#        "path": "/simple"
#    },
#    "times": {
#        "count": 1
#    }
#}
#
#/verifySequence
#
#/stop


