allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven'

    group = 'org.mock-server'
    version = "$mockServerVersion"

    repositories {
        flatDir { dirs "lib" }
        mavenLocal()
        mavenCentral()
    }

    gradle.projectsEvaluated {
        tasks.withType(Compile) {
            options.compilerArgs << "-Xlint:unchecked" <<  "-Xlint:deprecation"
        }
    }
}

project(':mockserver-client') {
    dependencies {
        compile project(':mockserver-core')
    }
}

project(':mockserver-war') {
    dependencies {
        compile project(':mockserver-core')
    }
}

project(':mockserver-integration-testing') {
    dependencies {
        compile project(':mockserver-core'), project(':mockserver-client')
    }
}

project(':mockserver-jetty') {
    dependencies {
        compile project(':mockserver-core'), project(':mockserver-war')
        testCompile project(':mockserver-client'), project(':mockserver-integration-testing')
    }
}

project(':mockserver-vertx') {
    dependencies {
        compile project(':mockserver-core')
        testCompile project(':mockserver-client')
    }
}

task writeNewPom << {
    pom {
        project {
            inceptionYear '2008'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("$buildDir/newpom.xml")
}

install {
    group = 'build'
    description = "Does a maven install of archives artifacts to local repository"
}

ext {
    ext.poms = []
    afterEvaluate {
        poms*.whenConfigured { pom ->
            pomModifications.each {
                configure(pom, it)
            }
        }
    }
    pomModifications = []
    modifyPom = { pomModifications << it }
}

tasks.withType(Upload) {
    repositories.withType(org.gradle.api.artifacts.maven.MavenResolver) {
        poms << it.pom
    }
}

modifyPom {
    project {
        name rootProject.name
        description 'mock-server - A simple server to support mocking responses from any server / service that uses HTTP. The expectations that configure how the mock server will respond and to incoming requests can be setup using any language that can create JSON. In simple client is provided to make this easy in Java.'
        groupId rootProject.group
        inceptionYear '2013'
        packaging 'jar'
        url 'http://org.mock-server.com'

        developers {
            developer {
                id 'jamesdbloom'
                name 'James D Bloom'
                email 'jamesdbloom@gmail.com'
                url 'http://blog.jamesdbloom.com'
            }
        }

        scm {
            connection 'scm:git:https://github.com/jamesdbloom/mockservice.git'
            developerConnection 'scm:git:git@github.com:jamesdbloom/mockservice.git'
            url 'https://github.com/jamesdbloom/mockservice.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        properties {
            setProperty('project.build.sourceEncoding', 'UTF8')
        }
    }
}

def loadProperties(String sourceFileName) {
    def config = new Properties()
    def propFile = new File(sourceFileName)
    if (propFile.canRead()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            project.ext[property.key] = property.value;
        }
    }
}

loadProperties("$rootDir/gradle.properties" as String)